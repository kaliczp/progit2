=== A verziókövetésről

(((version control)))
Mi az a verziókövetés, és miért kellene vele törődnünk?
A verziókövető rendszer nyílvántartja egy file vagy fájlok gyűjteményén időről-időre végzett módosításokat és bármelyik verzióhoz hozzáférhetünk a segítségével.
A könyvben szereplő példákban program forráskódokat verziókövetünk, a való világban szinte bármilyen a számítógépen található fájlal meg tehető.

Ha grafikus vagy webdizájner vagy és meg akarod tartani az összes verzióját egy képnek vagy egy weboldal tervezetnek (amit mindenképp szeretnél), egy Verziókövető Rendszer (VR) legalkalmasabb dolog a feladatra.
Lehetővé teszi fájlok visszaálítást egy előző verzióra, a teljes projekt visszaállítását egy előző verzióra, változatok összehasonlítását bármely idő intervalimra.  Megnézheted ki végzett utoljára módosítást, amely talán egy problémát okozott, ki vetett fel egy kérdést és mikor és így tovább.
A VR használata az is jelenti, ha elrontasz valamit vagy elveszne egy fájl, a változtatásokat könnyedén visszaállíthatod.
Végezetül mindezeket minimális erőforrás ráfordítással teheted meg.

==== Egyéni verziókövető rendszerek

(((version control,local)))
Sok ember választja verziókövető megoldásnak a fájlok különböző mappákba másolását (mappák neve egy időbélyeg ha értelmesen csinálják).
Ez a megoldás nagyon elterjedt, mert egyszerű, de hihetetlenül könnyű hibázni.
Elfelejtik hogy melyik mappában vannak, s ott véletlenül rossz fájlt szerkesztenek vagy írnak felül, olyat amit nem szerettek volna.

Régebben a probléma megoldására a programozók egyéni VR-eket fejlesztettek. Ezeknek volt egy egyszerű adatbázisa, amiben tárolta a fájlok egyes változásait, mint verziókat.

.Local version control.
image::images/local.png[Egyéni verziókövetés sematikus ábrája]

Az egyik legnébszerűbb VR a sok közül az RCS, ami még mindig sok számítógépen megtalálható.
A népszerű Mac OS X operációs rendszer is tartalmazza az 'rcs' parancsot, ha feltelpítjük a Fejlesztő Eszközöket.
Ez az eszköz egyszerűen folt (patch) készleteket (a fájlok verziók közötti különbségégek összesége) tárol.  Minden egyes változást egy speciális formátumba ment a merevlemezen.  A fájlok bármely állapotra visszaállíthatóak a foltok segítségével.

==== Központosított verziókövető rendszerek

(((version control,centralized)))
Az embereknek szembesülnie kellet azzal a problémával, hogy együtt kell működniük más fejesztőkkel akik más-más rendszereket használtak.
A probléma megoldását a központosított verziókövető rendszerek (KVR) kifejlesztése kívánta meg.
Ezek a rendszerek, úgymint a CVS, a Subversion (SVN) és a Perforce, egy darab központi szerveren tárolják az összes verziókövetett fájlt, a kliensek pedig ebből a központi tárolóból kérik le azokat. (((CVS)))(((Subversion)))(((Perforce)))
Évekig ezt jelentette a verziókövetés.

.Centralized version control.
image::images/centralized.png[Központi verziókövetés sematikus ábrája]

Ez az összeállítás rengeteg előnnyel rendelkezett, különös képpen az egyéni VR-kel szemben.
Példának okáért, mindenki pontosan tudta ki mit csinál a projekten belül.
Az adminisztrátorok teljes körüen irányítusk alatt tarthatják ki, mit és hogyan tehet meg; nagyságrendekkel könnyebb adminisztrálni egy KVR-t mint ha az összes kliens lokális adatbázisait kellene.

Ugyanakkor ez az összeállításnak van néhány komoly hátránya.
A leggyengébb láncszem a központi szerver.
Ha a szerver nem működik egy órán keresztül, akkor senki sem tud együttműködni vagy verziókövetni a változásait amin éppen dolgozott.
Ha a központi szerver lemezen adatvesztés lép fel és nincs megfelelő mentés róla, mindent elveszíthetsz a projekt teljes történetét kivéve persze az egyes emberek egyéni másolatait ami a saját gépeiken található.
Az egyéni VR rendszereket is veszélyezteti ez a veszély mivel mindent lokálisan egyetlen helyen tárolnak, megvan a veszélye hogy mindent elvíthetsz.

==== Elosztott verziókövető rendszerek

(((version control,distributed)))
Ekkor jelentek meg az Elosztott Verziókövető Rendszerek (EVR).
Az EVR-ekben (mint a Git, a Mercurical, a Bazaar vagy a Darcs) a kliensek nem csak a legutolsó állapotot kérik le, hanem a teljes repositorit.
Így ha a szerver elromlik, amin eddig folyt az együttműködés, bármelyik kliens repositoriból vissza állítható a teljes adatbázis.
Minden klón tényleg teljes mentésnek felel meg.

.Distributed version control.
image::images/distributed.png[Elosztott verziókövetés sematikus ábrája]

Ezenkívül, a legtöbb ilyen rendszer támogatja a több távoli repositori elérését, így lehetővé válik számunkra hogy több különböző csoportokkal különböző módun tudjanak együtműködni ugyaz azon a projekt keretein belül.
Így lehetőség van több munkafolyamat (workflow) alkamazására, ami egy centralizát hierarchikus modellben elképzelhetetlen.
